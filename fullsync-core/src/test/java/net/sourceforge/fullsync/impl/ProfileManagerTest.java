/*
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor,
 * Boston, MA 02110-1301, USA.
 *
 * For information about the authors of this project Have a look
 * at the AUTHORS file in the root of this project.
 */
package net.sourceforge.fullsync.impl;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Assertions.assertNull;
import static org.junit.jupiter.api.Assertions.assertTrue;

import org.junit.jupiter.api.AfterEach;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import com.google.common.eventbus.EventBus;

import net.sourceforge.fullsync.ConnectionDescription;
import net.sourceforge.fullsync.Profile;
import net.sourceforge.fullsync.schedule.IntervalSchedule;

public class ProfileManagerTest {
	private XmlBackedProfileManager profileManager;
	private EventBus eventBus;

	@BeforeEach
	public void beforeEach() {
		eventBus = new EventBus();
		eventBus.register(this);
		profileManager = new XmlBackedProfileManager(eventBus, null);
	}

	@AfterEach
	public void afterEach() {
		eventBus.unregister(this);
		eventBus = null;
		profileManager = null;
	}

	@Test
	public void testLoadV1_1ProfileWithScheduling() {
		assertTrue(profileManager.loadProfiles("src/test/resources/profile-1_1-schedule.xml"), "Load v1.1 profile with scheduling");
		assertEquals(1, profileManager.getProfiles().size(), "Loaded one profile");
		Profile p = profileManager.getProfileByName("Test Profile with Schedule");
		assertNotNull(p, "Loaded profile 'Test Profile with Schedule'");
		assertEquals("Profile description", p.getDescription(), "Loaded profile description");
		ConnectionDescription.Builder dstBuilder = new ConnectionDescription.Builder();
		dstBuilder.setScheme("file");
		dstBuilder.setPath("/b/");
		dstBuilder.setUserDirIsRoot(true);
		assertEquals(dstBuilder.build(), p.getDestination(), "Loaded profile destination");
		assertNotEquals(p.getId(), "", "Loaded profile got autogenerated profile id");
		assertEquals(0, p.getLastErrorLevel(), "Loaded profile has no error level");
		assertEquals("", p.getLastErrorString(), "Loaded profile has no error string");
		assertEquals(0, p.getLastScheduleTime(), "Loaded profile has no last schedule time");
		assertNull(p.getLastUpdate(), "Loaded profile last updated at '1/31/12 7:35 AM' - ignored legacy format");
		assertEquals("never", p.getLastUpdateText(), "Loaded profile last updated at '1/31/12 7:35 AM' - ignored legacy format");
		assertEquals("Test Profile with Schedule", p.getName(), "Loaded profile with known name");
		assertNotEquals("not scheduled", p.getNextUpdateText(), "Loaded profile has scheduling configured");
		assertNotEquals("not enabled", p.getNextUpdateText(), "Loaded profile has scheduling configured");
		assertEquals(new SimplifiedRuleSetDescriptor(false, null, true, null), p.getRuleSet(), "Loaded profile ruleset");
		assertEquals(new IntervalSchedule(3600000, 3600000, "hours"), p.getSchedule(), "Loaded profile schedule");
		ConnectionDescription.Builder srcBuilder = new ConnectionDescription.Builder();
		srcBuilder.setScheme("file");
		srcBuilder.setPath("/a/");
		srcBuilder.setUserDirIsRoot(true);
		assertEquals(srcBuilder.build(), p.getSource(), "Loaded profile destination");
		assertEquals("Publish/Update", p.getSynchronizationType(), "Loaded profile synchronization type");
	}
}
