import org.apache.tools.ant.filters.FixCrLfFilter

buildscript {
	repositories {
		maven {
			url offlineRepositoryRoot
		}
		mavenCentral()
		gradlePluginPortal()
	}
	dependencies {
		if (System.env.'CI') {
			classpath "org.kt3k.gradle.plugin:coveralls-gradle-plugin:2.8.3"
			classpath "org.sonarsource.scanner.gradle:sonarqube-gradle-plugin:3.3"
		}
		if (!System.env.'FULLSYNC_OFFLINE_BUILD') {
			classpath 'gradle.plugin.io.pry.gradle.offline_dependencies:gradle-offline-dependencies-plugin:0.5.0'
		}
		classpath "com.github.ben-manes:gradle-versions-plugin:0.44.0"
		classpath "com.diffplug.spotless:spotless-plugin-gradle:6.11.0"
		classpath "com.github.spotbugs.snom:spotbugs-gradle-plugin:5.0.13"
	}
}

repositories {
	maven {
		url offlineRepositoryRoot
	}
	mavenCentral()
}

if (!System.env.'FULLSYNC_OFFLINE_BUILD') {
	apply plugin: 'io.pry.gradle.offline_dependencies'
}

apply plugin: "com.github.ben-manes.versions"
apply plugin: "com.diffplug.spotless"
apply plugin: 'distribution'

if (System.env.'CI') {
	apply plugin: 'com.github.kt3k.coveralls'
	apply plugin: 'org.sonarqube'
}

apply plugin: "com.github.spotbugs"

dependencies {
	spotbugsPlugins 'com.h3xstream.findsecbugs:findsecbugs-plugin:1.12.0'
}

ext {
	libraries = [:]
	swtVersion = "3.118.0"
	slf4jVersion = "2.0.5"
	guiceVersion = "5.1.0"
	jUnitVersion = "5.6.2"
	commonsCliVersion = "1.4"
	commonsNetVersion = "3.8.0"
	commonsVfsVersion = "2.8.0"
	jcifsVersion = "1.3.17"
	jschVersion = "0.1.55"
	hamcrestVersion = "2.2"
	testcontainersVersion = "1.16.0"
}

libraries.apacheCommonsCli = "commons-cli:commons-cli:${commonsCliVersion}"
libraries.apacheCommonsNet = "commons-net:commons-net:${commonsNetVersion}"
libraries.apacheCommonsVfs = "org.apache.commons:commons-vfs2:${commonsVfsVersion}"
libraries.orgSambaJcifs = "jcifs:jcifs:${jcifsVersion}"
libraries.comJcraftJsch = "com.jcraft:jsch:${jschVersion}"
libraries.orgSlf4jJclOverSlf4j = "org.slf4j:jcl-over-slf4j:${slf4jVersion}"
libraries.guice = "com.google.inject:guice:${guiceVersion}"
libraries.guiceAssistedInject = "com.google.inject.extensions:guice-assistedinject:${guiceVersion}"
libraries.junitJupiter = "org.junit.jupiter:junit-jupiter:${jUnitVersion}"
libraries.hamcrest = "org.hamcrest:hamcrest:${hamcrestVersion}"
libraries.slf4jApi = "org.slf4j:slf4j-api:${slf4jVersion}"
libraries.testcontainers = "org.testcontainers:testcontainers:${testcontainersVersion}"
libraries.testcontainersJUnit = "org.testcontainers:junit-jupiter:${testcontainersVersion}"

group = "net.sourceforge.fullsync"
version = '0.11.0'

spotless {
	encoding 'UTF-8'
}

subprojects {
	group = rootProject.group
	version = rootProject.version
	apply plugin: 'com.diffplug.spotless'
	apply plugin: 'jacoco'

	def subproject = delegate
	plugins.withType(JavaPlugin).whenPluginAdded { p ->
		java {
			toolchain {
				languageVersion = JavaLanguageVersion.of(17)
			}
		}
		jar {
			manifest {
				attributes 'License': 'GPLv2+'
				attributes 'FullSync-Version': rootProject.version
				attributes 'Copyright': 'Copyright (c) 2022 the FullSync Team'
			}
		}
		spotless {
			java {
				licenseHeaderFile rootProject.file('resources/License-header.txt')
				eclipse().configFile rootProject.file('resources/eclipse-jdt-formatter.xml')
				removeUnusedImports()
				trimTrailingWhitespace()
				endWithNewline()
			}
		}
		test {
			maxParallelForks 8
		}
		jacocoRootReport.dependsOn subproject.tasks.jacocoTestReport
		tasks.compileJava.options.encoding = 'UTF-8'
		tasks.compileTestJava.options.encoding = 'UTF-8'
	}

	repositories {
		maven {
			url rootProject.file(offlineRepositoryRoot).toURI().toURL().toString()
		}
		mavenCentral()
	}
}

configurations {
	dist
}

gradle.projectsEvaluated {
	def deps = rootProject.dependencies
	subprojects.grep { it.configurations.findByName 'dist' }.each {
		def dep = deps.project path: it.path, configuration: "dist"
		deps.add 'dist', dep
	}
}

wrapper {
	distributionType = Wrapper.DistributionType.ALL
}

task renderChangeLog(type: JavaExec) {
	dependsOn ':fullsync-build-utils:jar'
	mainClass = 'net.sourceforge.fullsync.build.tools.ChangeLogGenerator'
	def versionsDir = file("versions")
	def changelogFile = file("$buildDir/ChangeLog.txt")
	inputs.files(fileTree(versionsDir) {
		include "*.html"
	})
	outputs.files changelogFile
	args "--src-dir", versionsDir, "--pattern", ".*\\.html", "--changelog", changelogFile
	doFirst {
		buildDir.mkdirs()
	}
}

def eolFilter(context, eol) {
	context.filter(FixCrLfFilter, eol:FixCrLfFilter.CrLf.newInstance(eol))
}

def manualCopySpec = copySpec {
	into('docs/manual') {
		from('docs/manual') {
			include '**'
		}
		from('resources') {
			include 'fullsync.ico'
			rename('fullsync.ico', 'favicon.ico')
		}
	}
}

def versionsCopySpec = copySpec {
	into('versions') {
		from('versions') {
			include '*.html'
		}
	}
}

distributions {
	linux {
		contents {
			eachFile { file ->
				if (file.name.endsWith(".sh")) {
					file.mode = 0755
				}
				if ("fullsync.sh" == file.name) {
					file.name = "fullsync"
				}
			}
			from('LICENSE') {
				eolFilter(delegate, "lf")
				rename('LICENSE', 'LICENSE.txt')
			}
			from(renderChangeLog) {
				eolFilter(delegate, "lf")
			}
			from('resources/images') {
				include 'fullsync.svg'
			}
			with manualCopySpec
			with versionsCopySpec
		}
	}
	mac {
		contents {
			eachFile { file ->
				if (file.name.endsWith(".sh")) {
					file.mode = 0755
				}
				if ("fullsync.sh" == file.name) {
					file.name = "fullsync"
				}
			}
			from('LICENSE') {
				filter(FixCrLfFilter, eol:FixCrLfFilter.CrLf.newInstance("lf"))
				rename('LICENSE', 'LICENSE.txt')
			}
			from(renderChangeLog) {
				eolFilter(delegate, "lf")
			}
			with manualCopySpec
			with versionsCopySpec
		}
	}
	windows {
		contents {
			from('resources') {
				include 'fullsync*.exe'
				include 'fullsync*.ini'
			}
			from('LICENSE') {
				eolFilter(delegate, "crlf")
				rename('LICENSE', 'LICENSE.txt')
			}
			from(renderChangeLog) {
				eolFilter(delegate, "crlf")
			}
			with manualCopySpec
			with versionsCopySpec
		}
	}
}

distZip.enabled = false
distTar.enabled = false
linuxDistZip.enabled = false
macDistZip.enabled = false
windowsDistTar.enabled = false

tasks.withType(Tar) {
	compression = Compression.GZIP
}

installLinuxDist.dependsOn ':fullsync-ui:jar'
linuxDistTar.dependsOn ':fullsync-ui:jar'

installMacDist.dependsOn ':fullsync-ui:jar'
macDistTar.dependsOn ':fullsync-ui:jar'

installWindowsDist.dependsOn ':fullsync-ui:jar'
windowsDistZip.dependsOn ':fullsync-ui:jar'
installWindowsDist.dependsOn ':fullsync-launcher:jar'
windowsDistZip.dependsOn ':fullsync-launcher:jar'

assembleDist {
	dependsOn assembleLinuxDist
	dependsOn assembleMacDist
	dependsOn assembleWindowsDist
}

installDist {
	dependsOn installLinuxDist
	dependsOn installMacDist
	dependsOn installWindowsDist
}

def mapArtifactToFilename(a) {
	def group = a.moduleVersion.id.group
	def classifier = a.classifier ?: ""
	classifier = classifier ? "-${classifier}" : ""
	return "${group}-${a.name}${classifier}.${a.extension}"
}

gradle.projectsEvaluated {
	def buildUltils = project(':fullsync-build-utils')
	renderChangeLog.classpath = buildUltils.configurations.runtimeClasspath + buildUltils.jar.outputs.files

	def ui = project(':fullsync-ui')
	def resolvedUiDist = ui.configurations.dist.resolvedConfiguration
	def commonContents = copySpec {}
	resolvedUiDist.resolvedArtifacts.each { a ->
		commonContents.with copySpec {
			def f = a.file
			into('lib') {
				from(f.path) {
					rename(f.name, mapArtifactToFilename(a))
				}
			}
		}
	}
	commonContents.with copySpec {
		into('lib') {
			from resolvedUiDist.files - resolvedUiDist.resolvedArtifacts*.file
		}
	}
	distributions.linux.contents.with commonContents
	distributions.mac.contents.with commonContents
	distributions.windows.contents.with commonContents

	def launcher = project(':fullsync-launcher')
	def resolvedLauncherDist = launcher.configurations.dist.resolvedConfiguration
	resolvedLauncherDist.resolvedArtifacts.each { a ->
		distributions.windows.contents.with copySpec {
			def f = a.file
			into('lib') {
				from(f.path) {
					rename(f.name, mapArtifactToFilename(a))
				}
			}
		}
	}

	subprojects.findAll { subproject ->
		subproject.pluginManager.hasPlugin('java')
	}.each { subproject ->
		jacocoRootReport.sourceDirectories.from(subproject.jacocoTestReport.sourceDirectories.files)
		jacocoRootReport.classDirectories.from(subproject.jacocoTestReport.classDirectories.files)
		if (subproject.file('src/test/java').exists()) {
			jacocoRootReport.executionData.from(subproject.jacocoTestReport.executionData)
		}
		testReport.reportOn subproject.test
		if (System.env.'CI') {
			coveralls.sourceDirs += subproject.sourceSets.main.allSource.srcDirs.flatten()
		}
	}
	task test {
		dependsOn ':spotlessCheck'
	}
}

apply plugin: 'jacoco'

jacoco {
	reportsDir = file("${project.reporting.baseDir}/jacoco")
}

task jacocoRootReport(type: JacocoReport) {
	reports {
		html.enabled = true
		xml.enabled = true
		csv.enabled = false
	}
}

task testReport(type: TestReport) {
	destinationDir = file("$buildDir/reports/allTests")
}

if (System.env.'CI') {
	coveralls {
		jacocoReportPath = "${project.reporting.baseDir}/jacoco/jacocoRootReport/jacocoRootReport.xml"
	}
	tasks.coveralls {
		group = 'Coverage reports'
		description = 'Uploads the aggregated coverage report to Coveralls'

		dependsOn jacocoRootReport
		onlyIf {
			System.env.'CI'
		}
	}

	tasks.sonarqube {
		onlyIf {
			System.properties.'sonar.organization' || System.env.SCRUTINIZER
		}
	}
}

task run(type: JavaExec) {
	dependsOn installLinuxDist
	mainClass = '-jar'
	args "${buildDir}/install/${project.name}-linux/lib/net.sourceforge.fullsync-fullsync-core.jar", "-v"
	systemProperties = [
		"org.eclipse.swt.graphics.Resource.reportNonDisposed": true
	]
}

task debug(type: JavaExec) {
	dependsOn installLinuxDist
	mainClass = '-jar'
	args "${buildDir}/install/${project.name}-linux/lib/net.sourceforge.fullsync-fullsync-core.jar", "-v"
	debug = true
	enableAssertions = true
	systemProperties = [
		"org.eclipse.swt.graphics.Resource.reportNonDisposed": true
	]
}

task debugLauncher(type: JavaExec) {
	dependsOn installWindowsDist
	mainClass = '-jar'
	args "${buildDir}/install/${project.name}-windows/lib/net.sourceforge.fullsync-fullsync-launcher.jar", "-v"
	debug = true
	enableAssertions = true
	systemProperties = [
		"org.eclipse.swt.graphics.Resource.reportNonDisposed": true
	]
}

dependencyUpdates {
	revision = "release"
	outputFormatter = "text"
	resolutionStrategy {
		componentSelection { rules ->
			rules.all { ComponentSelection selection ->
				boolean rejected = ['alpha', 'beta', 'rc', 'cr', 'm'].any { qualifier ->
					selection.candidate.version ==~ /(?i).*[.-]${qualifier}[.\d-]*/
				}
				if (rejected) {
					selection.reject('Release candidate')
					return
				}
				rejected = selection.candidate.version.contains('-')
				if (rejected) {
					selection.reject('SNAPSHOT version')
					return
				}
				rejected = selection.candidate.version ==~ /^\d{8}\..*/
				if (rejected) {
					selection.reject('Strange version... likely snapshot version')
					return
				}
			}
		}
	}
}

if (!System.env.'FULLSYNC_OFFLINE_BUILD') {
	apply from: './offline-build.gradle'
}
